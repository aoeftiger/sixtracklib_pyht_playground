option, -echo,-info,-warn;


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!		ACCESSING DATA IN THE TABLE
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

table_data (vara,varb,varc): macro =
{
	myvarb= table (vara,varb,varc);
};
	
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!		CREATING 6D BEAM DISTRIBUTION
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

6D_beam(gauss_cut,init_param_table) : macro={

	create_transverse=0;			//to control transversal distribution creation

	tstart	=	0	;
	ptstart	=	0	;
		
	while(create_transverse<1)
	{
		xdist	= tgauss(gauss_cut) ;
		pxdist	= tgauss(gauss_cut) ;
		ydist	= tgauss(gauss_cut) ;
		pydist	= tgauss(gauss_cut) ;	
		
		if (sqrt(xdist^2+pxdist^2+ydist^2+pydist^2)<= gauss_cut)
		{				
				exec, start_x(x,xdist,pxdist,ptstart,init_param_table,gauss_cut);
				exec, start_y(y,ydist,pydist,ptstart,init_param_table,gauss_cut);	
				create_transverse=1;				
				start,x=xstart, px=pxstart, y=ystart, py=pystart, t=tstart, pt=ptstart;
		}
	}
	
};


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!		creating matched distribution in X-plane, compensating for gaussian cut at 2 sigma, to get the same rms emittance_x.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	
start_x(coordinate,rand1,rand2,randpt,init_param_table,gauss_cut) : macro={
	
	eps				=	epscoordinate_gauss					;	//epscoordinate_gauss	 takes into account coefficient to compensate for gaussian cut at 2 sigma

	co_pos			=	0	;										//table(init_param_table, coordinate,1)			;
	co_pos_prime	=	0	;										//table(init_param_table, pcoordinate,1)		;
	
	beta			=	table(init_param_table, betcoordinate,1)													;
	alfa			=	table(init_param_table, alfcoordinate,1)													;
	
	disp			=	table(init_param_table, dcoordinate,1)														;
	dispprime		=	table(init_param_table, dpcoordinate,1)														;
	
	betatronpos		=	sqrt(beta*eps)*rand1																		;	
	
	coordinatestart	=	betatronpos+disp*randpt+co_pos																;
	pcoordinatestart=	(rand2*sqrt(eps)/sqrt(beta)-alfa/beta*betatronpos)+dispprime*randpt+co_pos_prime			;
			
};	
	
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!		creating matched distribution in Y-plane, compensating for gaussian cut at 2 sigma, to get the same rms emittance_x.	
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

start_y(coordinate,rand1,rand2,randpt,init_param_table,gauss_cut) : macro={
	
	eps				=	epscoordinate_gauss					;	//epscoordinate_gauss	 takes into account coefficient to compensate for gaussian cut at 2 sigma
	
	co_pos			=	0	;										//table(init_param_table, coordinate,1)			;
	co_pos_prime	=	0	;										//table(init_param_table, pcoordinate,1)		;
	
	beta			=	table(init_param_table, betcoordinate,1)													;
	alfa			=	table(init_param_table, alfcoordinate,1)													;
	
	disp			=	table(init_param_table, dcoordinate,1)														;
	dispprime		=	table(init_param_table, dpcoordinate,1)														;
	
	betatronpos		=	sqrt(beta*eps)*rand1																		;	
	
	coordinatestart	=	betatronpos+disp*randpt+co_pos																;
	pcoordinatestart=	(rand2*sqrt(eps)/sqrt(beta)-alfa/beta*betatronpos)+dispprime*randpt+co_pos_prime			;

};			
	
option, -echo,-info,-warn;
